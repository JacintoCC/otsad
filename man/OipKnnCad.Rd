% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/oip_knn_cad.R
\name{OipKnnCad}
\alias{OipKnnCad}
\title{Optimized Incremental processing KNN based Conformal Anomaly Detector
(KNN-CAD).}
\usage{
OipKnnCad(data, threshold, l, n, m, k, calibration.alpha = NULL,
  last.data = NULL)
}
\arguments{
\item{data}{Numerical vector that conforms the training and test data set.}

\item{threshold}{Anomaly threshold.}

\item{l}{Window length.}

\item{n}{Number of training set rows.}

\item{m}{Number of calibration set rows.}

\item{k}{Number of neighbours to take into account.}

\item{calibration.alpha}{Last calibration alpha values calculated in
the previous iteration and required for the next run.}

\item{last.data}{Last values of the data set converted into a
multi-dimensional vectors.}
}
\value{
Data set conformed by the following columns:

  \item{is.anomaly}{1 if the value is anomalous 0 otherwise.}
  \item{anomaly.score}{Probability of anomaly.}
  \item{calibration.alpha}{Last calibration alpha values calculated in the
  previous iteration and required for the next run.}
  \item{last.data}{Last values of the data set converted into a
  multi-dimensional vectors.}
}
\description{
\code{OipKnnCad} is the optimized implementation of the \code{IpKnnCad}
function using environment variables. This function allows you to calculate
anomalies using SD-EWMA in an incremental processing mode. KNN-CAD is a
model-free anomaly detection method for univariate time-series which adapts
to non-stationarity in the data stream and provides probabilistic
abnormality scores based on the conformal prediction paradigm.
}
\details{
\code{data} must be numerical vector without NA values.
\code{threshold} must be a numeric value between 0 and 1. If the anomaly
score obtained for an observation is less than the \code{threshold}, the
observation will be considered abnormal. It should be noted that to determine
whether an observation in time t is anomalous the dataset must have at least
\code{l}+\code{n}+\code{m} values. \code{calibration.alpha} and
\code{last.data} are the last calculations made in the last iteration of this
algorithm. The first time the algorithm is executed \code{calibration.alpha}
and \code{last.data} values are NULL. However, if you want to run a new batch
of data without having to include it in the old data set and restart the
process you only need to add this two parameters returned by the last run.

#' This algorithm can be used for both classical and incremental processing.
It should be noted that in case of having a finite data set the
\code{\link{CpKnnCad}} or \code{\link{OcpKnnCad}} algorithms are faster.
Incremental processing can be used in two ways. 1) Processing all available
data and saving \code{calibration.alpha} and \code{last.data} for future runs
in which you have new data. 2) Using the
\href{https://CRAN.R-project.org/package=stream}{stream} library for when you
have too much data and it does not fit into memory. An example has been made
for this use case.
}
\examples{
## EXAMPLE 1: ----------------------
## You can use it in the same way as in CpSdEwma passing the whole dataset as
## an argument.

## Generate data
set.seed(100)
n <- 500
x <- sample(1:100, n, replace = TRUE)
x[70:90] <- sample(110:115, 21, replace = TRUE)
x[25] <- 200
x[320] <- 170
df <- data.frame(timestamp=1:n,value=x)

## Set parameters
params.KNN <- list(threshold = 0.05, l = 20, n = 25, m = 25, k = 3)

## Calculate anomalies
result <- OipKnnCad(
  data = df$value,
  threshold = params.KNN$threshold,
  l = params.KNN$l,
  n = params.KNN$n,
  m = params.KNN$m,
  k = params.KNN$k
)

## Plot results
res <- cbind(df[(params.KNN$m+params.KNN$n+params.KNN$l):n,],
  data.frame(is.anomaly = result$is.anomaly))
y.limits <- c(-150,250)
plot(x = res$timestamp, y = res$value, type = "l", ylim = y.limits,
  xlab = "timestamp", ylab = "value", main = "KNN-CAD ANOMALY DETECTOR")
points(x = res[res$is.anomaly == 1, "timestamp"],
  y = res[res$is.anomaly == 1, "value"], pch=4, col="red", lwd = 2)

## EXAMPLE 2: ----------------------
## You can use it you can use it in an incremental way. This is an example using
## stream library. This library allows you to simulate streaming operation.

# install.packages("stream")
library("stream")

## Generate data
set.seed(100)
n <- 500
x <- sample(1:100, n, replace = TRUE)
x[70:90] <- sample(110:115, 21, replace = TRUE)
x[25] <- 200
x[320] <- 170
df=data.frame(timestamp=1:n,value=x)
dsd_df <- DSD_Memory(df)

## Initialize parameters for the loop
last.res <- NULL
res <- NULL
nread <- 100
numIter <- n\%/\%nread

## Set parameters
params.KNN <- list(threshold = 0.05, l = 20, n = 25, m = 25, k = 3)

## Calculate anomalies
for(i in 1:numIter) {
  # read new data
  newRow <- get_points(dsd_df, n = nread, outofpoints = "ignore")
  # calculate if it's an anomaly
  last.res <- OipKnnCad(
    data = newRow$value,
    threshold = params.KNN$threshold,
    l = params.KNN$l,
    n = params.KNN$n,
    m = params.KNN$m,
    k = params.KNN$k,
    calibration.alpha = last.res$calibration.alpha,
    last.data = last.res$last.data
  )
  # prepare the result
  if(!is.null(last.res$is.anomaly)){
    res <- rbind(res, cbind(newRow[(nread-length(last.res$is.anomaly)+1):nread,],
      is.anomaly = last.res$is.anomaly))
  }
}

## Plot results
y.limits <- c(-150,250)
plot(x = res$timestamp, y = res$value, type = "l", ylim = y.limits,
  xlab = "timestamp", ylab = "value", main = "KNN-CAD ANOMALY DETECTOR")
points(x = res[res$is.anomaly == TRUE, "timestamp"],
  y = res[res$is.anomaly == TRUE, "value"], pch=4, col="red", lwd = 2)




}
\references{
V. Ishimtsev, I. Nazarov, A. Bernstein and E. Burnaev. Conformal
k-NN Anomaly Detector for Univariate Data Streams. ArXiv e-prints, jun. 2017.
}
